import { AuthorizationMethodElement as AuthorizationMethod } from "@advanced-rest-client/authorization";
import { AmfDocument, ApiParametrizedSecurityScheme } from '@api-components/amf-helper-mixin';
import {
  typeChangedSymbol,
  propagateChanges,
} from "@advanced-rest-client/authorization/src/AuthorizationMethodElement.js";

export const METHOD_CUSTOM: string;
export const METHOD_PASS_THROUGH: string;
export const METHOD_API_KEY: string;
export const initApiFactory: unique symbol;
export const apiValue: unique symbol;
export const settingsHandler: unique symbol;

export default class ApiAuthorizationMethodElement extends AuthorizationMethod {
  /**
   * The full AMF graph model of the API.
   */
  amf: AmfDocument;
  /**
   * A security model generated by the AMF parser.
   */
  security: ApiParametrizedSecurityScheme;
  /**
   * When set the "description" of the security definition is rendered.
   * @attribute
   */
  descriptionOpened: boolean;
  /**
   * By default the element stores user input in a map that is associated with the specific
   * instance of this element. This way the element can be used multiple times in the same document.
   * However, this way parameter values generated by the generators or entered by the user won't
   * get populated in different operations.
   *
   * By setting this value the element prefers a global cache for values. Once the user enter
   * a value it is registered in the global cache and restored when the same parameter is used again.
   *
   * Do not use this option when the element is embedded multiple times in the page. It will result
   * in generating request data from the cache and not what's in the form inputs and these may not be in sync.
   *
   * These values are stored in memory only. Listen to the `change` event to learn that something changed.
   * @attribute
   */
  globalCache: boolean;
  /**
   * Used by the OAuth 2 type.
   * When set it overrides the `authorizationUri` in the authorization editor,
   * regardless to the authorization scheme applied to the request.
   * This is to be used with the mocking service.
   * @attribute
   */
  overrideAuthorizationUri: string;
  /**
   * Used by the OAuth 2 type.
   * When set it overrides the `authorizationUri` in the authorization editor,
   * regardless to the authorization scheme applied to the request.
   * This is to be used with the mocking service.
   * @attribute
   */
  overrideAccessTokenUri: string;

  constructor();

  // /**
  //  * A handler for the global authorization settings change event.
  //  * It applies the the event settings to the current configuration.
  //  */
  // [settingsHandler](e: CustomEvent): void;

  /**
   * A function called when `type` changed.
   * Note, that other properties may not be initialized just yet.
   *
   * @param type Current value.
   */
  [typeChangedSymbol](type: string): void;

  /**
   * Propagates values from the UI factory to this element.
   * This is to synchronize user entered values with the element's state.
   */
  [propagateChanges](): void;

  /**
   * Updates, if applicable, query parameter value.
   * This is supported for RAML custom scheme and Pass Through
   * that operates on query parameters model which is only an internal
   * model.
   *
   * This does nothing if the query parameter has not been defined for current
   * scheme.
   *
   * @param name The name of the changed parameter
   * @param newValue A value to apply. May be empty but must be defined.
   */
  updateQueryParameter(name: string, newValue: string): void;

  /**
   * Updates, if applicable, header value.
   * This is supported for RAML custom scheme and Pass Through
   * that operates on headers model which is only an internal model.
   *
   * This does nothing if the header has not been defined for current
   * scheme.
   *
   * @param name The name of the changed header
   * @param newValue A value to apply. May be empty but must be defined.
   */
  updateHeader(name: string, newValue: string): void;

  /**
   * Updates, if applicable, cookie value.
   * This is supported in OAS' Api Key.
   *
   * This does nothing if the cookie has not been defined for current
   * scheme.
   *
   * @param name The name of the changed cookie
   * @param newValue A value to apply. May be empty but must be defined.
   */
  updateCookie(name: string, newValue: string): void;
}
