import { SupportedInputTypes } from '@anypoint-web-components/anypoint-input';
import { 
  ApiAnyShape, 
  ApiArrayShape, 
  ApiParameter, 
  ApiScalarShape, 
  ApiShapeUnion, 
  ApiTupleShape, 
  ApiUnionShape,
} from '@api-components/amf-helper-mixin';
import { TemplateResult } from 'lit-element';
import { OperationParameter, ShapeTemplateOptions, ParameterRenderOptions } from '../types';

export declare function AmfParameterMixin<T extends new (...args: any[]) => {}>(base: T): T & AmfParameterMixinConstructor;

interface AmfParameterMixinConstructor {
  new(...args: any[]): AmfParameterMixin;
  constructor(...args: any[]): AmfParameterMixin;
}

/**
 * This mixin adds support for rendering operation parameter inputs.
 * It support:
 * - rendering inputs
 * - caching user input
 * - restoring cache input.
 */
export declare interface AmfParameterMixin {
  /**
   * By default the element stores user input in a map that is associated with the specific
   * instance of this element. This way the element can be used multiple times in the same document.
   * However, this way parameter values generated by the generators or entered by the user won't 
   * get populated in different operations.
   * 
   * By setting this value the element prefers a global cache for values. Once the user enter
   * a value it is registered in the global cache and restored when the same parameter is used again.
   * 
   * Do not use this option when the element is embedded multiple times in the page. It will result
   * in generating request data from the cache and not what's in the form inputs and these may not be in sync.
   * 
   * These values are stored in memory only. Listen to the `change` event to learn that something changed.
   * @attribute;
   */
  globalCache: boolean;
  parametersValue: OperationParameter[];
  nilValues: string[];

  /**
   * A function to be overwritten by child classes to execute an action when a parameter has changed.
   * @param key The key of the property that changed.
   */
  paramChanged(key: string): void;

  /**
   * Clears previously set values in the cache storage.
   */
  clearCache(): void;

  connectedCallback(): void;

  addArrayValueHandler(e: Event): void;

  /**
   * Reads the value to be set on an input.
   * 
   * @param isArray Whether the value should be read for an array.
   * @returns The value to set on the input. Note, it is not cast to the type.
   */
  readInputValue(parameter: ApiParameter, schema: ApiScalarShape, isArray?: boolean): any;
  paramChangeHandler(e: Event): void;
  booleanHandler(e: Event): void;
  /**
   * A handler for the remove param button click.
   */
  deleteParamHandler(e: Event): void;
  enumSelectionHandler(e: Event): void;
  /**
   * Handler for the nil value toggle.
   */
  nilHandler(e: Event): void;
  /**
   * @returns The template for the request parameter form control.
   */
  parameterTemplate(param: OperationParameter, opts?: ParameterRenderOptions): TemplateResult | string;

  /**
   * @returns The template for the request parameter form control.
   */
  parameterSchemaTemplate(parameter: ApiParameter, schema: ApiShapeUnion, userOpts?: ParameterRenderOptions, opts?: ShapeTemplateOptions): TemplateResult | string;

  /**
   * @returns The template for the schema parameter.
   */
  scalarShapeTemplate(parameter: ApiParameter, schema: ApiScalarShape, userOpts?: ParameterRenderOptions, opts?: ShapeTemplateOptions): TemplateResult | string;

  /**
   * @return A template for an input form item for the given type and schema
   */
  textInputTemplate(parameter: ApiParameter, schema: ApiScalarShape, type?: SupportedInputTypes, userOpts?: ParameterRenderOptions, opts?: ShapeTemplateOptions): TemplateResult;

  /**
   * @param paramId The ApiParameter id.
   * @param arrayIndex When this is an array item, the index on the array.
   * @returns The template for the param remove button. 
   */
  deleteParamTemplate(paramId: string, arrayIndex?: number): TemplateResult;

  /**
   * @returns The template for the enum input.
   */
  enumTemplate(parameter: ApiParameter, schema: ApiScalarShape, userOpts?: ParameterRenderOptions, opts?: ShapeTemplateOptions): TemplateResult;

  /**
   * @returns The template for the checkbox input.
   */
  booleanTemplate(parameter: ApiParameter, schema: ApiScalarShape, opts?: ShapeTemplateOptions): TemplateResult;

  /**
   * @returns The template for the nil checkbox input.
   */
  nillInputTemplate(parameter: ApiParameter): TemplateResult;

  /**
   * or now we do not support union shapes. There's no way to learn how to serialize
   * the Node shape to a string.
   * @returns The template for the node shape.
   */
  nodeShapeTemplate(): TemplateResult | string;

  /**
   * @returns The template for the union shape.
   */
  unionShapeTemplate(parameter: ApiParameter, schema: ApiUnionShape): TemplateResult | string;

  /**
   * This situation makes not sense as there's no mechanism to describe how to 
   * put a file into a path, query, or headers.
   * @returns The template for the file shape.
   */
  fileShapeTemplate(): TemplateResult | string;

  /**
   * For now we do not support union shapes. There's no way to learn how to serialize
   * the Schema shape to a string.
   * @returns The template for the schema shape.
   */
  schemaShapeTemplate(): TemplateResult | string;

  /**
   * @returns The template for the array shape.
   */
  arrayShapeTemplate(parameter: ApiParameter, schema: ApiArrayShape): TemplateResult | string;

  /**
   * @returns The template for the tuple shape.
   */
  tupleShapeTemplate(parameter: ApiParameter, schema: ApiTupleShape): TemplateResult | string;

  /**
   * @returns The template for the Any shape.
   */
  anyShapeTemplate(parameter: ApiParameter, schema: ApiAnyShape): TemplateResult | string;

  /**
   * @param {string} id The id of the parameter to add the value to.
   * @returns The template for the adding an array item button
   */
  addArrayItemTemplate(id: string): TemplateResult;
}
